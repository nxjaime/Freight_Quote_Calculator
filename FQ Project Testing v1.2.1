<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Freight Quote Calculator</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(to bottom right, #f9f9f9, #e0e0e0);
            color: #333;
            margin: 0;
            min-height: 100vh;
            display: flex;
            align-items: flex-start;
            justify-content: center;
            font-size: 16px;
        }
        
        .wrapper {
            display: flex;
            flex-wrap: wrap;
            margin: 20px;
            width: 90%;
            max-width: 1600px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }
        
        .form-container {
            flex: 1 1 40%;
            min-width: 300px;
            padding: 20px;
            box-sizing: border-box;
        }
        
        .output-container {
            flex: 1 1 40%;
            min-width: 300px;
            padding: 20px;
            box-sizing: border-box;
        }
        
        h1 {
            text-align: left;
            color: #2b7a78;
            font-size: 1.8em;
            margin-bottom: 20px;
            font-weight: 700;
        }
        
        label {
            display: block;
            margin-top: 15px;
            font-size: 1em;
            color: #555;
            font-weight: 500;
        }
        
        input[type="text"],
        select {
            width: 100%;
            padding: 10px;
            font-size: 1em;
            margin-top: 5px;
            border-radius: 4px;
            border: 1px solid #ccc;
            box-sizing: border-box;
            transition: all 0.3s ease;
            background: #fafafa;
        }
        
        input[type="text"]:focus,
        select:focus {
            border-color: #2b7a78;
            outline: none;
            box-shadow: 0 0 3px rgba(43, 122, 120, 0.3);
        }
        
        button {
            margin-top: 20px;
            width: 100%;
            padding: 15px;
            font-size: 1em;
            font-weight: 500;
            background-color: #2b7a78;
            color: #ffffff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        button:hover {
            background-color: #236661;
        }
        
        .output {
            border: 1px solid #ddd;
            border-radius: 6px;
            padding: 20px;
            min-height: 200px;
            background: #fafafa;
        }
        
        .output p {
            font-size: 0.95em;
            line-height: 1.5;
            color: #333;
            margin: 5px 0;
        }
        
        hr {
            border: 0;
            height: 1px;
            background: #ddd;
            margin: 20px 0;
        }
        
        @media (max-width: 900px) {
            .form-container,
            .output-container {
                flex: 1 1 100%;
            }
            .output {
                margin-top: 20px;
            }
        }
        
        .placeholder-text {
            color: #aaa;
            font-style: italic;
        }
    </style>
</head>

<body>
    <div class="wrapper">
        <div class="form-container">
            <h1>Freight Quote Calculator</h1>
            <label for="customer">Customer:</label>
            <input type="text" id="customer" placeholder="Enter customer name">

            <label for="startZip">Starting Zip Code:</label>
            <input type="text" id="startZip" placeholder="Enter starting zip code">

            <label for="endZip">Ending Zip Code:</label>
            <input type="text" id="endZip" placeholder="Enter ending zip code">

            <label for="commodity">Commodity:</label>
            <select id="commodity">
                <option value="General Freight">General Freight</option>
                <option value="Refrigerated Goods">Refrigerated Goods</option>
                <option value="Hazardous Materials">Hazardous Materials</option>
                <option value="Oversized Loads">Oversized Loads</option>
                <option value="Livestock">Livestock</option>
                <option value="Vehicles">Vehicles</option>
                <option value="Electronics">Electronics</option>
                <option value="Furniture">Furniture</option>
                <option value="Building Materials">Building Materials</option>
            </select>

            <label for="fuelProgram">Fuel Program:</label>
            <select id="fuelProgram">
                <option value="None">None</option>
                <option value="WSW">WSW Fuel Program</option>
                <option value="GBP">Green Bay Packaging Fuel Program</option>
            </select>

            <label for="lineType">Line Type:</label>
            <select id="lineType">
                <option value="Headhaul">Headhaul</option>
                <option value="Backhaul">Backhaul</option>
            </select>

            <label for="tripType">Trip Type:</label>
            <select id="tripType">
                <option value="One Way">One Way</option>
                <option value="Round Trip">Round Trip</option>
            </select>

            <label for="loadType">Load Type:</label>
            <select id="loadType">
                <option value="Live Unload">Live Unload - 59 Minutes </option>
                <option value="Drop and Hook">Drop and Hook - 30 Minutes </option>
            </select>

            <label for="profitMargin">Profit Margin (%):</label>
            <select id="profitMargin"></select>

            <label for="tolls">Toll Charges ($):</label>
            <input type="text" id="tolls" placeholder="Enter toll charges">

            <label for="misc">Miscellaneous Charges ($):</label>
            <input type="text" id="misc" placeholder="Enter miscellaneous charges">

            <label for="trailerType">Trailer Type:</label>
            <select id="trailerType">
                <option value="Van">Van</option>
                <option value="Flatbed">Flatbed</option>
                <option value="Reefer">Reefer</option>
            </select>

            <label for="numTrailers">Number of Trailers:</label>
            <input type="text" id="numTrailers" placeholder="Enter number of trailers">

            <label for="costPerTrailer">Cost Per Trailer ($):</label>
            <input type="text" id="costPerTrailer" placeholder="Enter cost per trailer">

            <button onclick="calculateQuote()">Calculate Quote</button>
        </div>
        <div class="output-container">
            <div class="output" id="output">
                <p class="placeholder-text">Your quote details will appear here after calculation.</p>
            </div>
            <button onclick="copyToClipboard()">Copy to Clipboard</button>
        </div>
    </div>

    <script>
        let highlightedData = "";
        let currentFuelProgram = "";
        let db;

        function initDatabase() {
            const request = indexedDB.open('FreightQuotes', 1);

            request.onerror = function(event) {
                console.error('Database error:', event.target.error);
            };

            request.onsuccess = function(event) {
                db = event.target.result;
            };

            request.onupgradeneeded = function(event) {
                db = event.target.result;
                if (!db.objectStoreNames.contains('quotes')) {
                    db.createObjectStore('quotes', { keyPath: 'id', autoIncrement: true });
                }
            };
        }

        function saveQuoteToDB(data) {
            if (!db) {
                console.warn('Database not initialized');
                return;
            }
            const tx = db.transaction('quotes', 'readwrite');
            tx.objectStore('quotes').add(data);
            tx.oncomplete = function() {
                console.log('Quote saved');
            };
            tx.onerror = function(event) {
                console.error('Failed to save quote:', event.target.error);
            };
        }

        function generateProfitMarginOptions() {
            const profitMarginSelect = document.getElementById('profitMargin');
            for (let i = 0; i <= 100; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.text = i + '%';
                if (i === 12) option.selected = true;
                profitMarginSelect.appendChild(option);
            }
        }

        window.onload = function() {
            generateProfitMarginOptions();
            initDatabase();
        };

        function copyToClipboard() {
            if (!highlightedData.trim() || highlightedData.includes("Your quote details")) {
                alert("Please calculate a quote before copying.");
                return;
            }
            const tempTextarea = document.createElement('textarea');
            tempTextarea.value = highlightedData;
            document.body.appendChild(tempTextarea);
            tempTextarea.select();
            try {
                const success = document.execCommand('copy');
                if (success) {
                    alert("Highlighted items copied to clipboard.");
                } else {
                    alert("Unable to copy. Please try manually.");
                }
            } catch (err) {
                console.error("Copy failed:", err);
                alert("Copy failed. Please try manually.");
            }
            document.body.removeChild(tempTextarea);
        }

        async function calculateQuote() {
            const customer = document.getElementById('customer').value;
            const startZip = document.getElementById('startZip').value;
            const endZip = document.getElementById('endZip').value;
            const commodity = document.getElementById('commodity').value;
            const fuelProgram = document.getElementById('fuelProgram').value;
            currentFuelProgram = fuelProgram;
            const lineType = document.getElementById('lineType').value;
            const tripType = document.getElementById('tripType').value;
            const profitMarginPercent = parseInt(document.getElementById('profitMargin').value);
            const loadType = document.getElementById('loadType').value;
            const tollCharges = parseFloat(document.getElementById('tolls').value) || 0.00;
            const miscCharges = parseFloat(document.getElementById('misc').value) || 0.00;
            const outputDiv = document.getElementById('output');

            // Trailer Adder Inputs
            const trailerType = document.getElementById('trailerType').value;
            const numTrailers = parseFloat(document.getElementById('numTrailers').value) || 0;
            const costPerTrailer = parseFloat(document.getElementById('costPerTrailer').value) || 0;
            const trailerAdder = numTrailers * costPerTrailer;

            outputDiv.innerHTML = '<p>Calculating...</p>';
            highlightedData = "";

            try {
                const startCoords = await getCoordinates(startZip);
                const endCoords = await getCoordinates(endZip);
                let distance = await getDistance(startCoords, endCoords);
                if (tripType === "Round Trip") {
                    distance *= 2;
                }
                const fuelPrice = await getFuelPrice();
                const fuelPriceNumber = parseFloat(fuelPrice);
                if (isNaN(fuelPriceNumber)) throw new Error('Fuel price data is invalid.');
                const driverWagePerHour = 91.06;
                const wearAndTearPerMile = 0.20;
                const fuelEfficiency = 6;

                let extraTime = 0;
                if (loadType === 'Drop and Hook') {
                    extraTime = 1;
                } else if (loadType === 'Live Unload') {
                    extraTime = 2;
                }

                let timePerTrip = (distance / 50) + extraTime;
                let fuelBaseAdderPerMile = 0;
                let incrementalFuelCostPerMile = 0;
                let fuelCostPerMile = 0;
                let showFuelBaseAdder = false;

                // Fuel program logic
                if (fuelProgram === "WSW" || fuelProgram === "GBP") {
                    fuelBaseAdderPerMile = (1.24 / fuelEfficiency);
                    showFuelBaseAdder = true;
                    incrementalFuelCostPerMile = getFuelCostFromChart(fuelPriceNumber, fuelProgram);
                    fuelCostPerMile = fuelBaseAdderPerMile + incrementalFuelCostPerMile;
                } else {
                    fuelCostPerMile = fuelPriceNumber / fuelEfficiency;
                }

                // Calculate linehaul base (NO Tolls or Misc included)
                const totalDriverWage = driverWagePerHour * timePerTrip;
                const wearAndTear = wearAndTearPerMile * distance;
                let totalFuelBaseAdder = 0;
                if (showFuelBaseAdder) {
                    totalFuelBaseAdder = fuelBaseAdderPerMile * distance;
                }
                const linehaulBase = totalDriverWage + wearAndTear + totalFuelBaseAdder;

                // Margin
                const marginAmount = linehaulBase * (profitMarginPercent / 100);
                const totalLinehaulWithMargin = linehaulBase + marginAmount;

                // Fuel cost
                let fuelCost;
                if (showFuelBaseAdder) {
                    fuelCost = incrementalFuelCostPerMile * distance;
                } else {
                    fuelCost = fuelCostPerMile * distance;
                }

                // Final quote
                const finalQuote = totalLinehaulWithMargin + tollCharges + miscCharges + fuelCost;
                const costPerMile = finalQuote / distance;

                // Prepare output text in the browser
                let fuelBaseAdderLine = '';
                let totalFuelBaseAdderLine = '';
                if (showFuelBaseAdder) {
                    fuelBaseAdderLine = `<p><strong>Fuel Base Adder (per mile):</strong> $${fuelBaseAdderPerMile.toFixed(2)}</p>`;
                    totalFuelBaseAdderLine = `<p><strong>Fuel Base Adder:</strong> $${totalFuelBaseAdder.toFixed(2)}</p>`;
                }

                outputDiv.innerHTML = `
                <p><strong>Customer:</strong> ${customer}</p>
                <p><strong>Starting Zip Code:</strong> ${startZip}</p>
                <p><strong>Ending Zip Code:</strong> ${endZip}</p>
                <p><strong>Commodity:</strong> ${commodity}</p>
                <p><strong>Fuel Program:</strong> ${fuelProgram}</p>
                <p><strong>Line Type:</strong> ${lineType}</p>
                <p><strong>Trip Type:</strong> ${tripType}</p>
                <p><strong>Load Type:</strong> ${loadType}</p>
                <p><strong>Trip Distance (miles):</strong> ${distance.toFixed(2)}</p>
                <p><strong>Fuel Price ($/gallon):</strong> $${fuelPriceNumber.toFixed(2)}</p>
                ${fuelBaseAdderLine}
                <p><strong>Fuel Cost per Mile:</strong> $${fuelCostPerMile.toFixed(2)}</p>
                <p><strong>Driver Wage ($/hour):</strong> $${driverWagePerHour.toFixed(2)}</p>
                <p><strong>Time per Trip (hours):</strong> ${timePerTrip.toFixed(2)}</p>
                <p><strong>Wear and Tear (per mile):</strong> $${wearAndTearPerMile.toFixed(2)}</p>
                <p><strong>Profit Margin (%):</strong> ${profitMarginPercent}%</p>
                <hr>
                <p><strong>Total Driver Wage:</strong> $${totalDriverWage.toFixed(2)}</p>
                <p><strong>Wear and Tear:</strong> $${wearAndTear.toFixed(2)}</p>
                ${totalFuelBaseAdderLine}
                <p><strong>Linehaul (base only):</strong> $${linehaulBase.toFixed(2)}</p>
                <p><strong>Margin:</strong> $${marginAmount.toFixed(2)}</p>
                <p><strong>Total Linehaul with Margin:</strong> $${totalLinehaulWithMargin.toFixed(2)}</p>
                <hr>
                <p><strong>Toll Charges:</strong> $${tollCharges.toFixed(2)}</p>
                <p><strong>Misc Charges:</strong> $${miscCharges.toFixed(2)}</p>
                <p><strong>Fuel Cost:</strong> $${fuelCost.toFixed(2)}</p>
                <hr>
                <p><strong>Final Quote:</strong> $${finalQuote.toFixed(2)}</p>
                <p><strong>Cost per Mile:</strong> $${costPerMile.toFixed(2)}</p>
                <hr>
                <p><strong>Trailer Details</strong></p>
                <p><strong>Trailer Type:</strong> ${trailerType}</p>
                <p><strong>Number of Trailers:</strong> ${numTrailers}</p>
                <p><strong>Cost Per Trailer:</strong> $${costPerTrailer.toFixed(2)}</p>
                <p><strong>Trailer Adder Total:</strong> $${trailerAdder.toFixed(2)}</p>
            `;

                // Build the text for copying
                highlightedData =
                    `Customer: ${customer}
Starting Zip Code: ${startZip}
Ending Zip Code: ${endZip}
Fuel Program: ${fuelProgram}
Trip Distance (miles): ${distance.toFixed(2)}
Linehaul: $${totalLinehaulWithMargin.toFixed(2)}
Estimated Fuel Cost: $${fuelCost.toFixed(2)}`;

                // If we have valid trailer data (both fields > 0), add the dashed line and trailer info
                if (numTrailers > 0 && costPerTrailer > 0) {
                    highlightedData += `
---------------------------------------
Trailer Type: ${trailerType}
Number of Trailers: ${numTrailers}
Cost Per Trailer: $${costPerTrailer.toFixed(2)}
Trailer Adder Total: $${trailerAdder.toFixed(2)}`;
                }

                highlightedData += `

This quote is valid for 7 days from issuance and subject to our standard Terms and Conditions, available upon request. Rates provided exclude detention, layovers, taxes, or additional services unless specifically indicated. Shipments must comply with stated weights, dimensions, and standard loading/unloading procedures; additional charges may apply for non-standard conditions or unforeseen circumstances. Acceptance of this quotation implies acknowledgment and acceptance of all conditions stated herein.`;

                const quoteRecord = {
                    timestamp: new Date().toISOString(),
                    customer,
                    startZip,
                    endZip,
                    commodity,
                    fuelProgram,
                    lineType,
                    tripType,
                    loadType,
                    distance: parseFloat(distance.toFixed(2)),
                    fuelPrice: fuelPriceNumber,
                    finalQuote: parseFloat(finalQuote.toFixed(2)),
                    costPerMile: parseFloat(costPerMile.toFixed(2)),
                    tollCharges,
                    miscCharges,
                    trailerType,
                    numTrailers,
                    costPerTrailer,
                    trailerAdder: parseFloat(trailerAdder.toFixed(2))
                };
                saveQuoteToDB(quoteRecord);

            } catch (error) {
                console.error("Error calculating quote:", error);
                outputDiv.innerHTML = `<p>Error: ${error.message}</p>`;
                highlightedData = "";
            }
        }

        async function getCoordinates(zipCode) {
            // Special handling for zip codes 54130 and 54140
            const specialZipCodes = {
                "54130": {
                    lat: 44.5000,
                    lon: -88.1000
                },
                "54140": {
                    lat: 44.6000,
                    lon: -88.2000
                }
            };
            if (specialZipCodes.hasOwnProperty(zipCode)) {
                return specialZipCodes[zipCode];
            }
            const orsApiKey = '5b3ce3597851110001cf62485172559144e44dd7a73d863f6ed182a9';
            const hereApiKey = 'IsvnF75ReVPvyHEBhxmGROe3gEzCRTNcBxbGnmly2no';
            try {
                const response = await fetch(`https://api.openrouteservice.org/geocode/search?api_key=${orsApiKey}&text=${zipCode}`);
                if (!response.ok) throw new Error('ORS geocoding failed.');
                const data = await response.json();
                if (!data.features || data.features.length === 0) throw new Error('Invalid zip code.');
                const coords = data.features[0].geometry.coordinates;
                return {
                    lat: coords[1],
                    lon: coords[0]
                };
            } catch (error) {
                console.warn('OpenRouteService geocoding failed, trying Here API.');
                const response = await fetch(`https://geocode.search.hereapi.com/v1/geocode?q=${zipCode}&apikey=${hereApiKey}`);
                if (!response.ok) throw new Error('Failed to fetch coordinates for zip code.');
                const data = await response.json();
                if (!data.items || data.items.length === 0) throw new Error(`Invalid zip code: ${zipCode}`);
                const coords = data.items[0].position;
                return {
                    lat: coords.lat,
                    lon: coords.lng
                };
            }
        }

        async function getDistance(start, end) {
            const orsApiKey = '5b3ce3597851110001cf62485172559144e44dd7a73d863f6ed182a9';
            const hereApiKey = 'IsvnF75ReVPvyHEBhxmGROe3gEzCRTNcBxbGnmly2no';
            try {
                const url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${orsApiKey}&start=${start.lon},${start.lat}&end=${end.lon},${end.lat}`;
                const response = await fetch(url);
                if (!response.ok) throw new Error('ORS routing failed.');
                const data = await response.json();
                if (!data.features || data.features.length === 0) throw new Error('No route data found.');
                const distanceMeters = data.features[0].properties.summary.distance;
                return distanceMeters / 1609.34;
            } catch (error) {
                console.warn('OpenRouteService routing failed, trying Here API.');
                const url = `https://router.hereapi.com/v8/routes?transportMode=car&origin=${start.lat},${start.lon}&destination=${end.lat},${end.lon}&return=summary&apikey=${hereApiKey}`;
                const response = await fetch(url);
                if (!response.ok) throw new Error(`Failed to calculate distance between locations: ${response.statusText}`);
                const data = await response.json();
                if (!data.routes || data.routes.length === 0) throw new Error('No route data found.');
                return data.routes[0].sections[0].summary.length / 1609.34;
            }
        }

        async function getFuelPrice() {
            const apiKey = '6X12L4MRPsaefGUsuDR8gnMslvzgdcWqgJ7eLtd3';
            const apiUrl = 'https://api.eia.gov/v2/petroleum/pri/gnd/data/?frequency=weekly&data[0]=value&facets[series][]=EMD_EPD2D_PTE_R20_DPG&start=2024-01-01&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=1&api_key=' + apiKey;
            const response = await fetch(apiUrl);
            if (!response.ok) throw new Error('Failed to fetch fuel price.');
            const data = await response.json();
            if (!data.response || !data.response.data || data.response.data.length === 0) throw new Error('Fuel price data is unavailable.');
            return parseFloat(data.response.data[0].value);
        }

        function getFuelCostFromChart(fuelPrice, program) {
            const chartData = {
                "WSW": [{
                    min: 1.241,
                    max: 1.290,
                    cost: 0.01
                }, {
                    min: 1.291,
                    max: 1.340,
                    cost: 0.02
                }, {
                    min: 1.341,
                    max: 1.390,
                    cost: 0.03
                }, {
                    min: 1.391,
                    max: 1.440,
                    cost: 0.04
                }, {
                    min: 1.441,
                    max: 1.490,
                    cost: 0.05
                }, {
                    min: 1.491,
                    max: 1.540,
                    cost: 0.06
                }, {
                    min: 1.541,
                    max: 1.590,
                    cost: 0.07
                }, {
                    min: 1.591,
                    max: 1.640,
                    cost: 0.08
                }, {
                    min: 1.641,
                    max: 1.690,
                    cost: 0.09
                }, {
                    min: 1.691,
                    max: 1.740,
                    cost: 0.10
                }, {
                    min: 1.741,
                    max: 1.790,
                    cost: 0.11
                }, {
                    min: 1.791,
                    max: 1.840,
                    cost: 0.12
                }, {
                    min: 1.841,
                    max: 1.890,
                    cost: 0.13
                }, {
                    min: 1.891,
                    max: 1.940,
                    cost: 0.14
                }, {
                    min: 1.941,
                    max: 1.990,
                    cost: 0.15
                }, {
                    min: 1.991,
                    max: 2.040,
                    cost: 0.16
                }, {
                    min: 2.041,
                    max: 2.090,
                    cost: 0.17
                }, {
                    min: 2.091,
                    max: 2.140,
                    cost: 0.18
                }, {
                    min: 2.141,
                    max: 2.190,
                    cost: 0.19
                }, {
                    min: 2.191,
                    max: 2.240,
                    cost: 0.20
                }, {
                    min: 2.241,
                    max: 2.290,
                    cost: 0.21
                }, {
                    min: 2.291,
                    max: 2.340,
                    cost: 0.22
                }, {
                    min: 2.341,
                    max: 2.390,
                    cost: 0.23
                }, {
                    min: 2.391,
                    max: 2.440,
                    cost: 0.24
                }, {
                    min: 2.441,
                    max: 2.490,
                    cost: 0.25
                }, {
                    min: 2.491,
                    max: 2.540,
                    cost: 0.26
                }, {
                    min: 2.541,
                    max: 2.590,
                    cost: 0.27
                }, {
                    min: 2.591,
                    max: 2.640,
                    cost: 0.28
                }, {
                    min: 2.641,
                    max: 2.690,
                    cost: 0.29
                }, {
                    min: 2.691,
                    max: 2.740,
                    cost: 0.30
                }, {
                    min: 2.741,
                    max: 2.790,
                    cost: 0.31
                }, {
                    min: 2.791,
                    max: 2.840,
                    cost: 0.32
                }, {
                    min: 2.841,
                    max: 2.890,
                    cost: 0.33
                }, {
                    min: 2.891,
                    max: 2.940,
                    cost: 0.34
                }, {
                    min: 2.941,
                    max: 2.990,
                    cost: 0.35
                }, {
                    min: 2.991,
                    max: 3.040,
                    cost: 0.36
                }, {
                    min: 3.041,
                    max: 3.090,
                    cost: 0.37
                }, {
                    min: 3.091,
                    max: 3.140,
                    cost: 0.38
                }, {
                    min: 3.141,
                    max: 3.190,
                    cost: 0.39
                }, {
                    min: 3.191,
                    max: 3.240,
                    cost: 0.40
                }, {
                    min: 3.241,
                    max: 3.290,
                    cost: 0.41
                }, {
                    min: 3.291,
                    max: 3.340,
                    cost: 0.42
                }, {
                    min: 3.341,
                    max: 3.390,
                    cost: 0.43
                }, {
                    min: 3.391,
                    max: 3.440,
                    cost: 0.44
                }, {
                    min: 3.441,
                    max: 3.490,
                    cost: 0.45
                }, {
                    min: 3.491,
                    max: 3.540,
                    cost: 0.46
                }, {
                    min: 3.541,
                    max: 3.590,
                    cost: 0.47
                }, {
                    min: 3.591,
                    max: 3.640,
                    cost: 0.48
                }, {
                    min: 3.641,
                    max: 3.690,
                    cost: 0.49
                }, {
                    min: 3.691,
                    max: 3.740,
                    cost: 0.50
                }],
                "GBP": [{
                    min: 1.241,
                    max: 1.300,
                    cost: 0.01
                }, {
                    min: 1.301,
                    max: 1.360,
                    cost: 0.02
                }, {
                    min: 1.361,
                    max: 1.420,
                    cost: 0.03
                }, {
                    min: 1.421,
                    max: 1.480,
                    cost: 0.04
                }, {
                    min: 1.481,
                    max: 1.540,
                    cost: 0.05
                }, {
                    min: 1.541,
                    max: 1.600,
                    cost: 0.06
                }, {
                    min: 1.601,
                    max: 1.660,
                    cost: 0.07
                }, {
                    min: 1.661,
                    max: 1.720,
                    cost: 0.08
                }, {
                    min: 1.721,
                    max: 1.780,
                    cost: 0.09
                }, {
                    min: 1.781,
                    max: 1.840,
                    cost: 0.10
                }, {
                    min: 1.841,
                    max: 1.900,
                    cost: 0.11
                }, {
                    min: 1.901,
                    max: 1.960,
                    cost: 0.12
                }, {
                    min: 1.961,
                    max: 2.020,
                    cost: 0.13
                }, {
                    min: 2.021,
                    max: 2.080,
                    cost: 0.14
                }, {
                    min: 2.081,
                    max: 2.140,
                    cost: 0.15
                }, {
                    min: 2.141,
                    max: 2.200,
                    cost: 0.16
                }, {
                    min: 2.201,
                    max: 2.260,
                    cost: 0.17
                }, {
                    min: 2.261,
                    max: 2.320,
                    cost: 0.18
                }, {
                    min: 2.321,
                    max: 2.380,
                    cost: 0.19
                }, {
                    min: 2.381,
                    max: 2.440,
                    cost: 0.20
                }, {
                    min: 2.441,
                    max: 2.500,
                    cost: 0.21
                }, {
                    min: 2.501,
                    max: 2.560,
                    cost: 0.22
                }, {
                    min: 2.561,
                    max: 2.620,
                    cost: 0.23
                }, {
                    min: 2.621,
                    max: 2.680,
                    cost: 0.24
                }, {
                    min: 2.681,
                    max: 2.740,
                    cost: 0.25
                }, {
                    min: 2.741,
                    max: 2.800,
                    cost: 0.26
                }, {
                    min: 2.801,
                    max: 2.860,
                    cost: 0.27
                }, {
                    min: 2.861,
                    max: 2.920,
                    cost: 0.28
                }, {
                    min: 2.921,
                    max: 2.980,
                    cost: 0.29
                }, {
                    min: 2.981,
                    max: 3.040,
                    cost: 0.30
                }, {
                    min: 3.041,
                    max: 3.100,
                    cost: 0.31
                }, {
                    min: 3.101,
                    max: 3.160,
                    cost: 0.32
                }, {
                    min: 3.161,
                    max: 3.220,
                    cost: 0.33
                }, {
                    min: 3.221,
                    max: 3.280,
                    cost: 0.34
                }, {
                    min: 3.281,
                    max: 3.340,
                    cost: 0.35
                }, {
                    min: 3.341,
                    max: 3.400,
                    cost: 0.36
                }, {
                    min: 3.401,
                    max: 3.460,
                    cost: 0.37
                }, {
                    min: 3.461,
                    max: 3.520,
                    cost: 0.38
                }, {
                    min: 3.521,
                    max: 3.580,
                    cost: 0.39
                }, {
                    min: 3.581,
                    max: 3.640,
                    cost: 0.40
                }, {
                    min: 3.641,
                    max: 3.700,
                    cost: 0.41
                }, {
                    min: 3.701,
                    max: 3.760,
                    cost: 0.42
                }, {
                    min: 3.761,
                    max: 3.820,
                    cost: 0.43
                }, {
                    min: 3.821,
                    max: 3.880,
                    cost: 0.44
                }, {
                    min: 3.881,
                    max: 3.940,
                    cost: 0.45
                }, {
                    min: 3.941,
                    max: 4.000,
                    cost: 0.46
                }, {
                    min: 4.001,
                    max: 4.060,
                    cost: 0.47
                }, {
                    min: 4.061,
                    max: 4.120,
                    cost: 0.48
                }, {
                    min: 4.121,
                    max: 4.180,
                    cost: 0.49
                }, {
                    min: 4.181,
                    max: 4.240,
                    cost: 0.50
                }]
            };

            const selectedChart = chartData[program];
            for (const range of selectedChart) {
                if (fuelPrice >= range.min && fuelPrice <= range.max) {
                    return range.cost;
                }
            }
            throw new Error("Fuel price out of range for selected program.");
        }
    </script>
</body>

</html>
